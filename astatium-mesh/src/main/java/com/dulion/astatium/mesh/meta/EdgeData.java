/**
 * Copyright 2016 Phillip DuLion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dulion.astatium.mesh.meta;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition(style = "minimal")
public class EdgeData implements ImmutableBean
{
	@PropertyDefinition()
	private final int parentId;
	
	@PropertyDefinition()
	private final int childId;
	
	@PropertyDefinition()
	private final int index;
	
	//------------------------- AUTOGENERATED START -------------------------
	///CLOVER:OFF
	/**
	 * The meta-bean for {@code EdgeData}.
	 * @return the meta-bean, not null
	 */
	public static EdgeData.Meta meta() {
		return EdgeData.Meta.INSTANCE;
	}

	static {
		JodaBeanUtils.registerMetaBean(EdgeData.Meta.INSTANCE);
	}

	/**
	 * Returns a builder used to create an instance of the bean.
	 * @return the builder, not null
	 */
	public static EdgeData.Builder builder() {
		return new EdgeData.Builder();
	}

	/**
	 * Restricted constructor.
	 * @param builder  the builder to copy from, not null
	 */
	protected EdgeData(EdgeData.Builder builder) {
		this.parentId = builder.parentId;
		this.childId = builder.childId;
		this.index = builder.index;
	}

	@Override
	public EdgeData.Meta metaBean() {
		return EdgeData.Meta.INSTANCE;
	}

	@Override
	public <R> Property<R> property(String propertyName) {
		return metaBean().<R>metaProperty(propertyName).createProperty(this);
	}

	@Override
	public Set<String> propertyNames() {
		return metaBean().metaPropertyMap().keySet();
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the parentId.
	 * @return the value of the property
	 */
	public int getParentId() {
		return parentId;
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the childId.
	 * @return the value of the property
	 */
	public int getChildId() {
		return childId;
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the index.
	 * @return the value of the property
	 */
	public int getIndex() {
		return index;
	}

	//-----------------------------------------------------------------------
	/**
	 * Returns a builder that allows this bean to be mutated.
	 * @return the mutable builder, not null
	 */
	public Builder toBuilder() {
		return new Builder(this);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj != null && obj.getClass() == this.getClass()) {
			EdgeData other = (EdgeData) obj;
			return (parentId == other.parentId) &&
					(childId == other.childId) &&
					(index == other.index);
		}
		return false;
	}

	@Override
	public int hashCode() {
		int hash = getClass().hashCode();
		hash = hash * 31 + JodaBeanUtils.hashCode(parentId);
		hash = hash * 31 + JodaBeanUtils.hashCode(childId);
		hash = hash * 31 + JodaBeanUtils.hashCode(index);
		return hash;
	}

	@Override
	public String toString() {
		StringBuilder buf = new StringBuilder(128);
		buf.append("EdgeData{");
		int len = buf.length();
		toString(buf);
		if (buf.length() > len) {
			buf.setLength(buf.length() - 2);
		}
		buf.append('}');
		return buf.toString();
	}

	protected void toString(StringBuilder buf) {
		buf.append("parentId").append('=').append(JodaBeanUtils.toString(parentId)).append(',').append(' ');
		buf.append("childId").append('=').append(JodaBeanUtils.toString(childId)).append(',').append(' ');
		buf.append("index").append('=').append(JodaBeanUtils.toString(index)).append(',').append(' ');
	}

	//-----------------------------------------------------------------------
	/**
	 * The meta-bean for {@code EdgeData}.
	 */
	public static class Meta extends DirectMetaBean {
		/**
		 * The singleton instance of the meta-bean.
		 */
		static final Meta INSTANCE = new Meta();

		/**
		 * The meta-property for the {@code parentId} property.
		 */
		private final MetaProperty<Integer> parentId = DirectMetaProperty.ofImmutable(
				this, "parentId", EdgeData.class, Integer.TYPE);
		/**
		 * The meta-property for the {@code childId} property.
		 */
		private final MetaProperty<Integer> childId = DirectMetaProperty.ofImmutable(
				this, "childId", EdgeData.class, Integer.TYPE);
		/**
		 * The meta-property for the {@code index} property.
		 */
		private final MetaProperty<Integer> index = DirectMetaProperty.ofImmutable(
				this, "index", EdgeData.class, Integer.TYPE);
		/**
		 * The meta-properties.
		 */
		private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
				this, null,
				"parentId",
				"childId",
				"index");

		/**
		 * Restricted constructor.
		 */
		protected Meta() {
		}

		@Override
		protected MetaProperty<?> metaPropertyGet(String propertyName) {
			switch (propertyName.hashCode()) {
				case 1175162725:  // parentId
					return parentId;
				case 746268503:  // childId
					return childId;
				case 100346066:  // index
					return index;
			}
			return super.metaPropertyGet(propertyName);
		}

		@Override
		public EdgeData.Builder builder() {
			return new EdgeData.Builder();
		}

		@Override
		public Class<? extends EdgeData> beanType() {
			return EdgeData.class;
		}

		@Override
		public Map<String, MetaProperty<?>> metaPropertyMap() {
			return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		@Override
		protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
			switch (propertyName.hashCode()) {
				case 1175162725:  // parentId
					return ((EdgeData) bean).getParentId();
				case 746268503:  // childId
					return ((EdgeData) bean).getChildId();
				case 100346066:  // index
					return ((EdgeData) bean).getIndex();
			}
			return super.propertyGet(bean, propertyName, quiet);
		}

		@Override
		protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
			metaProperty(propertyName);
			if (quiet) {
				return;
			}
			throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
		}

	}

	//-----------------------------------------------------------------------
	/**
	 * The bean-builder for {@code EdgeData}.
	 */
	public static class Builder extends DirectFieldsBeanBuilder<EdgeData> {

		private int parentId;
		private int childId;
		private int index;

		/**
		 * Restricted constructor.
		 */
		protected Builder() {
		}

		/**
		 * Restricted copy constructor.
		 * @param beanToCopy  the bean to copy from, not null
		 */
		protected Builder(EdgeData beanToCopy) {
			this.parentId = beanToCopy.getParentId();
			this.childId = beanToCopy.getChildId();
			this.index = beanToCopy.getIndex();
		}

		//-----------------------------------------------------------------------
		@Override
		public Object get(String propertyName) {
			switch (propertyName.hashCode()) {
				case 1175162725:  // parentId
					return parentId;
				case 746268503:  // childId
					return childId;
				case 100346066:  // index
					return index;
				default:
					throw new NoSuchElementException("Unknown property: " + propertyName);
			}
		}

		@Override
		public Builder set(String propertyName, Object newValue) {
			switch (propertyName.hashCode()) {
				case 1175162725:  // parentId
					this.parentId = (Integer) newValue;
					break;
				case 746268503:  // childId
					this.childId = (Integer) newValue;
					break;
				case 100346066:  // index
					this.index = (Integer) newValue;
					break;
				default:
					throw new NoSuchElementException("Unknown property: " + propertyName);
			}
			return this;
		}

		@Override
		public Builder set(MetaProperty<?> property, Object value) {
			super.set(property, value);
			return this;
		}

		@Override
		public Builder setString(String propertyName, String value) {
			setString(meta().metaProperty(propertyName), value);
			return this;
		}

		@Override
		public Builder setString(MetaProperty<?> property, String value) {
			super.setString(property, value);
			return this;
		}

		@Override
		public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
			super.setAll(propertyValueMap);
			return this;
		}

		@Override
		public EdgeData build() {
			return new EdgeData(this);
		}

		//-----------------------------------------------------------------------
		/**
		 * Sets the parentId.
		 * @param parentId  the new value
		 * @return this, for chaining, not null
		 */
		public Builder parentId(int parentId) {
			this.parentId = parentId;
			return this;
		}

		/**
		 * Sets the childId.
		 * @param childId  the new value
		 * @return this, for chaining, not null
		 */
		public Builder childId(int childId) {
			this.childId = childId;
			return this;
		}

		/**
		 * Sets the index.
		 * @param index  the new value
		 * @return this, for chaining, not null
		 */
		public Builder index(int index) {
			this.index = index;
			return this;
		}

		//-----------------------------------------------------------------------
		@Override
		public String toString() {
			StringBuilder buf = new StringBuilder(128);
			buf.append("EdgeData.Builder{");
			int len = buf.length();
			toString(buf);
			if (buf.length() > len) {
				buf.setLength(buf.length() - 2);
			}
			buf.append('}');
			return buf.toString();
		}

		protected void toString(StringBuilder buf) {
			buf.append("parentId").append('=').append(JodaBeanUtils.toString(parentId)).append(',').append(' ');
			buf.append("childId").append('=').append(JodaBeanUtils.toString(childId)).append(',').append(' ');
			buf.append("index").append('=').append(JodaBeanUtils.toString(index)).append(',').append(' ');
		}

	}

	///CLOVER:ON
	//-------------------------- AUTOGENERATED END --------------------------
}
